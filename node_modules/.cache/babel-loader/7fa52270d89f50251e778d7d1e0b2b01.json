{"ast":null,"code":"var _jsxFileName = \"/home/igor/Documentos/Trybe/projetos/projeto_16/sd-08-project-trybewallet/src/components/AddForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies, saveExpense } from '../actions';\nimport fetchCurrency from '../services';\nconst INITIAL_STATE = {\n  value: 0,\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  id: 0,\n  total: '0.00'\n};\n\nclass AddForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE\n    };\n  }\n\n  componentDidMount() {\n    const {\n      getCurrency\n    } = this.props;\n    getCurrency();\n  }\n\n  totalExpenses() {\n    const {\n      expenses\n    } = this.props;\n    const totalExpenses = expenses.reduce((total, each) => {\n      const {\n        value,\n        currency,\n        exchangeRates\n      } = each;\n      const rate = parseFloat(exchangeRates[currency].ask);\n      return total + parseFloat(value) * rate;\n    }, 0);\n    return totalExpenses.toFixed(2);\n  }\n\n  onChangeHandler(event) {\n    this.setState({\n      [event.name]: event.value\n    });\n  }\n\n  async handleClick(event) {\n    event.preventDefault();\n    const {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      id\n    } = this.state;\n    const {\n      saveExpense\n    } = this.props;\n    const exchangeRates = await fetchCurrency();\n    const expense = {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      id,\n      exchangeRates\n    };\n    saveExpense(expense);\n    this.setState({ ...INITIAL_STATE,\n      id: id + 1,\n      total: this.totalExpenses()\n    });\n  }\n\n  tagRender() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"Categoria:\", /*#__PURE__*/React.createElement(\"select\", {\n      id: \"tag\",\n      name: \"tag\",\n      onChange: this.onChangeHandler,\n      \"data-testid\": \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Alimenta\\xE7\\xE3o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, \"Alimenta\\xE7\\xE3o\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Lazer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, \"Lazer\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Trabalho\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, \"Trabalho\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Transporte\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, \"Transporte\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Sa\\xFAde\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, \"Sa\\xFAde\"))));\n  }\n\n  methodRender() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"method\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"M\\xE9todo de pagamento:\", /*#__PURE__*/React.createElement(\"select\", {\n      id: \"method\",\n      name: \"method\",\n      onChange: this.onChangeHandler,\n      \"data-testid\": \"method-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Dinheiro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \"Dinheiro\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de cr\\xE9dito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, \"Cart\\xE3o de cr\\xE9dito\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de d\\xE9bito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"Cart\\xE3o de d\\xE9bito\"))));\n  }\n\n  currencyRender(currenciesList) {\n    return /*#__PURE__*/React.createElement(\"select\", {\n      id: \"currency\",\n      name: \"currency\",\n      onChange: this.onChangeHandler,\n      \"data-testid\": \"currency-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, currenciesList.map(currency => currency === 'USDT' ? '' : /*#__PURE__*/React.createElement(\"option\", {\n      key: currency,\n      \"data-testid\": currency,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, currency)));\n  }\n\n  render() {\n    const {\n      currencies\n    } = this.props;\n    const currenciesTags = Object.keys(currencies || {});\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, \"Valor:\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"value\",\n      name: \"value\",\n      type: \"number\",\n      onChange: this.onChangeHandler,\n      \"data-testid\": \"value-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"currency\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, \"Moeda:\", this.currencyRender(currenciesTags))), this.methodRender(), this.tagRender(), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }, \"Descri\\xE7\\xE3o:\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"description\",\n      name: \"description\",\n      type: \"text\",\n      onChange: this.onChangeHandler,\n      \"data-testid\": \"description-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  expenses: state.wallet.expenses,\n  currencies: state.wallet.currencies[0]\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCurrency: () => dispatch(fetchCurrencies()),\n  saveExpense: expense => dispatch(saveExpense(expense))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddForm);","map":{"version":3,"sources":["/home/igor/Documentos/Trybe/projetos/projeto_16/sd-08-project-trybewallet/src/components/AddForm.js"],"names":["React","Component","connect","PropTypes","fetchCurrencies","saveExpense","fetchCurrency","INITIAL_STATE","value","description","currency","method","tag","id","total","AddForm","constructor","props","state","componentDidMount","getCurrency","totalExpenses","expenses","reduce","each","exchangeRates","rate","parseFloat","ask","toFixed","onChangeHandler","event","setState","name","handleClick","preventDefault","expense","tagRender","methodRender","currencyRender","currenciesList","map","render","currencies","currenciesTags","Object","keys","mapStateToProps","wallet","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies, saveExpense } from '../actions';\nimport fetchCurrency from '../services';\n\nconst INITIAL_STATE = {\n  value: 0,\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  id: 0,\n  total: '0.00',\n};\n\nclass AddForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...INITIAL_STATE,\n    };\n  }\n\n  componentDidMount() {\n    const { getCurrency } = this.props;\n    getCurrency();\n  }\n\n  totalExpenses() {\n    const { expenses } = this.props;\n\n    const totalExpenses = expenses.reduce(\n      (total, each) => {\n        const { value, currency, exchangeRates } = each;\n        const rate = parseFloat(exchangeRates[currency].ask);\n        return total + (parseFloat(value) * rate);\n      },\n      0,\n    );\n    return totalExpenses.toFixed(2);\n  }\n\n  onChangeHandler(event) {\n    this.setState({ [event.name]: event.value });\n  }\n\n  async handleClick(event) {\n    event.preventDefault();\n    const { value, description, currency, method, tag, id } = this.state;\n    const { saveExpense } = this.props;\n    const exchangeRates = await fetchCurrency();\n\n    const expense = {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      id,\n      exchangeRates,\n    };\n\n    saveExpense(expense);\n\n    this.setState({\n      ...INITIAL_STATE,\n      id: id + 1,\n      total: this.totalExpenses(),\n    });\n  }\n\n  tagRender() {\n    return (\n      <div>\n        <label htmlFor=\"tag\">\n          Categoria:\n          <select id=\"tag\" name=\"tag\" onChange={ this.onChangeHandler } data-testid=\"tag-input\">\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  methodRender() {\n    return (\n      <div>\n        <label htmlFor=\"method\">\n          Método de pagamento:\n          <select\n            id=\"method\"\n            name=\"method\"\n            onChange={ this.onChangeHandler }\n            data-testid=\"method-input\"\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  currencyRender(currenciesList) {\n    return (\n      <select\n        id=\"currency\"\n        name=\"currency\"\n        onChange={ this.onChangeHandler }\n        data-testid=\"currency-input\"\n      >\n        { currenciesList.map((currency) => (\n          currency === 'USDT' ? ''\n            : <option key={ currency } data-testid={ currency }>{ currency }</option>\n        )) }\n      </select>\n    );\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const currenciesTags = Object.keys(currencies || {});\n    return (\n      <div>\n        <div>\n          <label htmlFor=\"value\">\n            Valor:\n            <input\n              id=\"value\"\n              name=\"value\"\n              type=\"number\"\n              onChange={ this.onChangeHandler }\n              data-testid=\"value-input\"\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"currency\">\n            Moeda:\n            { this.currencyRender(currenciesTags) }\n          </label>\n        </div>\n        { this.methodRender() }\n        { this.tagRender() }\n        <div>\n          <label htmlFor=\"description\">\n            Descrição:\n            <input\n              id=\"description\"\n              name=\"description\"\n              type=\"text\"\n              onChange={ this.onChangeHandler }\n              data-testid=\"description-input\"\n            />\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  currencies: state.wallet.currencies[0],\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrency: () => dispatch(fetchCurrencies()),\n  saveExpense: (expense) => dispatch(saveExpense(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddForm);\n"]},"metadata":{},"sourceType":"module"}