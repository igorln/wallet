{"version":3,"sources":["services/index.js","actions/index.js","pages/Login.js","components/AddForm.js","components/Header.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["fetchCurrency","fetch","then","r","json","ok","Promise","resolve","reject","getCurrency","currencies","type","Login","onChangeHandler","bind","disableButton","state","email","password","redirect","field","newValue","this","setState","func","boolean","length","test","className","disabled","onClick","getEmail","props","to","src","alt","data-testid","placeholder","onChange","e","target","value","React","Component","connect","dispatch","userInfo","INITIAL_STATE","description","currency","method","tag","id","total","AddForm","handleClick","name","event","preventDefault","saveExpenses","exchangeRates","htmlFor","currenciesList","map","key","currenciesTags","Object","keys","currencyRender","methodRender","tagRender","defaultProps","expenses","wallet","user","a","error","expense","Headers","currencyData","Number","ask","reduce","acc","Math","round","getTotal","toFixed","Table","deleteExpense","currencyDetails","entries","find","console","log","code","parseFloat","expensesTable","removeExpense","Wallet","Header","App","path","component","exact","Boolean","window","location","hostname","match","initialState","action","isFetching","filter","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.45dac0c7.chunk.js","sourcesContent":["const fetchCurrency = () => (\n  fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((r) => (r.json()\n      .then(\n        (json) => (r.ok ? Promise.resolve(json) : Promise.reject(json)),\n      )\n    ))\n);\n\nexport default fetchCurrency;\n","import fetchCurrency from '../services';\n\nconst USER_INFO = 'USER_INFO';\nconst REQUEST_CURRENCY = 'REQUEST_CURRENCY';\nconst GET_CURRENCY = 'GET_CURRENCY';\nconst FAILED_REQUEST = 'FAILED_REQUEST';\nconst SAVE_EXPENSE = 'SAVE_EXPENSE';\nconst REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport const userInfo = (email) => ({\n  type: USER_INFO,\n  email,\n});\n\nconst requestCurrency = () => ({\n  type: REQUEST_CURRENCY,\n});\n\nconst getCurrency = (currencies) => ({\n  type: GET_CURRENCY,\n  currencies,\n});\n\nconst failedRequest = (error) => ({\n  type: FAILED_REQUEST,\n  error,\n});\n\nexport const fetchCurrencies = () => async (dispatch) => {\n  try {\n    dispatch(requestCurrency());\n\n    const currencies = await fetchCurrency();\n\n    dispatch(getCurrency(currencies));\n  } catch (error) {\n    dispatch(failedRequest(error));\n  }\n};\n\nexport const saveExpense = (expenses) => ({\n  type: SAVE_EXPENSE,\n  expenses,\n});\n\nexport const removeExpense = (id) => ({\n  type: REMOVE_EXPENSE,\n  id,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { userInfo } from '../actions';\nimport '../style/login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.disableButton = this.disableButton.bind(this);\n\n    this.state = {\n      email: '',\n      password: '',\n      redirect: false,\n    };\n  }\n\n  onChangeHandler(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  disableButton(func) {\n    const re = /\\S+@\\S+\\.\\S+/;\n    const minLength = 6;\n    const { email, password } = this.state;\n    const funcs = (data) => {\n      func(data);\n      this.setState({\n        redirect: true,\n      });\n    };\n    const boolean = !(password.length >= minLength && re.test(email));\n    return (\n      <button type=\"submit\" className=\"btn btn-warning btn-size\" disabled={boolean} onClick={ () => funcs(email) }>Login</button>\n    );\n  }\n\n  render() {\n    const { getEmail } = this.props;\n    const { redirect } = this.state;\n    if (redirect === true) {\n      return <Redirect to=\"/wallet/main\" />;\n    }\n    return (\n      <div className=\"position-absolute top-50 start-50 translate-middle login-box\">\n        <img src=\"images/currency_wallet.png\" alt=\"wallet\"/>\n        <h1>World Wallet</h1>\n        <div>\n          <input\n            type=\"email\"\n            data-testid=\"email-input\"\n            placeholder=\"Name@example.com\"\n            onChange={ (e) => this.onChangeHandler('email', e.target.value) }\n            className=\"form-control input-width\"\n          />\n          <input\n            placeholder=\"Password\"\n            type=\"password\"\n            data-testid=\"password-input\"\n            onChange={ (e) => this.onChangeHandler('password', e.target.value) }\n            className=\"form-control input-width\"\n          />\n          { this.disableButton(getEmail) }\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getEmail: (email) => dispatch(userInfo(email)),\n});\n\nLogin.propTypes = {\n  getEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies, saveExpense } from '../actions';\nimport fetchCurrency from '../services';\nimport '../style/AddForm.css';\n\nconst INITIAL_STATE = {\n  value: 0,\n  description: '',\n  currency: 'USD',\n  method: 'Cash',\n  tag: 'Food',\n  id: 0,\n  total: '0.00',\n};\n\nclass AddForm extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ...INITIAL_STATE,\n    };\n\n    this.onChangeHandler = this.onChangeHandler.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { getCurrency } = this.props;\n    getCurrency();\n  }\n\n  onChangeHandler({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  async handleClick(event) {\n    event.preventDefault();\n    const { value, description, currency, method, tag, id } = this.state;\n    const { saveExpenses } = this.props;\n    const exchangeRates = await fetchCurrency();\n\n    const expense = {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      id,\n      exchangeRates,\n    };\n\n    saveExpenses(expense);\n\n    this.setState({\n      ...INITIAL_STATE,\n      id: id + 1,\n    });\n  }\n\n  tagRender() {\n    return (\n      <div>\n        <label htmlFor=\"tag\">\n          Tag:\n          <select\n            id=\"tag\"\n            name=\"tag\"\n            onChange={ (e) => this.onChangeHandler(e) }\n            data-testid=\"tag-input\"\n            className=\"form-select\"\n          >\n            <option value=\"Food\">Food</option>\n            <option value=\"Recreation\">Recreation</option>\n            <option value=\"Work\">Work</option>\n            <option value=\"Transport\">Transport</option>\n            <option value=\"Health\">Health</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  methodRender() {\n    return (\n      <div>\n        <label htmlFor=\"method\" className=\"size\">\n          Payment Method:\n          <select\n            id=\"method\"\n            name=\"method\"\n            onChange={ (e) => this.onChangeHandler(e) }\n            data-testid=\"method-input\"\n            className=\"form-select\"\n          >\n            <option value=\"Cash\">Cash</option>\n            <option value=\"Credit Card\">Credit Card</option>\n            <option value=\"Debit Card\">Debit Card</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  currencyRender(currenciesList) {\n    return (\n      <select\n        id=\"currency\"\n        name=\"currency\"\n        onChange={ (e) => this.onChangeHandler(e) }\n        data-testid=\"currency-input\"\n        className=\"form-select\"\n      >\n        { currenciesList.map((currency) => (\n          currency === 'USDT' ? ''\n            : <option key={ currency } data-testid={ currency }>{ currency }</option>\n        )) }\n      </select>\n    );\n  }\n\n  render() {\n    const { value, description } = this.state;\n    const { currencies } = this.props;\n    const currenciesTags = Object.keys(currencies || {});\n\n    return (\n      <div className=\"addTable\">\n        <div>\n          <label htmlFor=\"value\">\n            Value:\n            <input\n              id=\"value\"\n              name=\"value\"\n              value={ value }\n              type=\"number\"\n              onChange={ (e) => this.onChangeHandler(e) }\n              data-testid=\"value-input\"\n              className=\"form-control\"\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"currency\">\n            Currency:\n            { this.currencyRender(currenciesTags) }\n          </label>\n        </div>\n        { this.methodRender() }\n        { this.tagRender() }\n        <div>\n          <label htmlFor=\"description\">\n            Description:\n            <input\n              id=\"description\"\n              name=\"description\"\n              value={ description }\n              type=\"text\"\n              onChange={ (e) => this.onChangeHandler(e) }\n              data-testid=\"description-input\"\n              className=\"form-control\"\n            />\n          </label>\n        </div>\n        <div>\n          <button type=\"submit\" className=\"btn btn-primary mt-4\"onClick={ this.handleClick }>Add expense</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  currencies: state.wallet.currencies[0],\n  user: state.user.email,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrency: () => dispatch(fetchCurrencies()),\n  saveExpenses: (expense) => dispatch(saveExpense(expense)),\n});\n\nAddForm.propTypes = {\n  currencies: PropTypes.objectOf(PropTypes.object),\n  getCurrency: PropTypes.func.isRequired,\n  saveExpenses: PropTypes.func.isRequired,\n};\n\nAddForm.defaultProps = {\n  currencies: {},\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../style/header.css';\n\nclass Headers extends Component {\n  getTotal() {\n    const { expenses } = this.props;\n\n    return expenses\n      .map(({ currency, value, exchangeRates }) => {\n        const currencyData = exchangeRates[currency];\n        const total = Number(value) * Number(currencyData.ask);\n        return total;\n      })\n      .reduce((acc, expense) => acc + expense, 0);\n  }\n\n  render() {\n    const { user } = this.props;\n    return (\n      <header>\n        <h1>\n          World Wallet\n        </h1>\n        <h3>\n          Email:\n          <span data-testid=\"email-field\" className=\"me-5\">{ user }</span>\n          Total expenditure: R$\n          <span data-testid=\"total-field\">\n            { (Math.round(this.getTotal() * 100) / 100).toFixed(2) }\n          </span>\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </h3>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeaders.propTypes = {\n  user: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n};\n\nHeaders.defaultProps = {\n  expenses: [],\n};\n\nexport default connect(mapStateToProps)(Headers);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../style/table.css';\nimport { removeExpense } from '../actions';\n\nclass Table extends Component {\n  expensesTable({ value, description, currency, method, tag, id, exchangeRates }) {\n    const { deleteExpense } = this.props;\n    const currencyDetails = Object.entries(exchangeRates)\n      .find((currencies) => currencies[0] === currency)[1];\n      console.log(currencyDetails);\n\n    return (\n      <tr key={ id }>\n        <td>{ description }</td>\n        <td>{ tag }</td>\n        <td>{ method }</td>\n        <td>{value}</td>\n        <td>{ currencyDetails.code }</td>\n        <td>\n          R$\n          { parseFloat(currencyDetails.ask).toFixed(2) }\n        </td>\n        <td>\n          R$\n          { (parseFloat(value) * parseFloat(currencyDetails.ask)).toFixed(2) }\n        </td>\n        <td>Real</td>\n        <td>\n          <button\n            type=\"button\"\n            data-testid=\"delete-btn\"\n            onClick={ () => deleteExpense(id) }\n            className=\"btn btn-danger\"\n          >\n            X\n          </button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { expenses } = this.props;\n\n    return (\n      <div className=\"tableContainer\">\n        <table className=\"expenseTable\">\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Tag</th>\n              <th>Payment Method</th>\n              <th>Value</th>\n              <th>Currency</th>\n              <th>Currency Rate</th>\n              <th>Exchange Value</th>\n              <th>Conversion Currency</th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n          <tbody>\n            { expenses\n              .map((expense) => (this.expensesTable(expense)))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (id) => dispatch(removeExpense(id)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  deleteExpense: PropTypes.func.isRequired,\n};\n\nTable.defaultProps = {\n  expenses: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport AddForm from '../components/AddForm';\nimport Headers from '../components/Header';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Headers />\n        <AddForm />\n        <Table />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/wallet/main\" component={ Wallet } />\n      <Route path=\"/wallet\" exact component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  email: '',\n};\n\nconst user = (state = initialState, action) => {\n  switch (action.type) {\n  case 'USER_INFO':\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","const initialState = {\n  currencies: [],\n  expenses: [],\n};\n\nfunction wallet(state = initialState, action) {\n  switch (action.type) {\n  case 'REQUEST_CURRENCY':\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case 'GET_CURRENCY':\n    return {\n      ...state,\n      isFetching: false,\n      currencies: [action.currencies],\n    };\n  case 'FAILED_REQUEST':\n    return {\n      ...state,\n      isFetching: false,\n      error: action.error,\n    };\n  case 'SAVE_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expenses],\n    };\n  case 'REMOVE_EXPENSE':\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.id),\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst reducer = combineReducers({ user, wallet });\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport './bootstrap.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}